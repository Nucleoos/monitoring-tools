#!/usr/bin/env python
import operator
try:
    def readable(octets):
        units = ['K', 'M', 'G', 'T', 'P']
        unit = 'B'
        for i, u in enumerate(units):
            if octets >= 1024:
                octets = octets / 1024.0
                unit = units[i]
            else:
                break
        return octets, unit


    exit_code_output = {0: 'OK',
                        1: 'WARNING',
                        2: 'CRITICAL',
                        3: 'UNKNOWN',
                       }
    exit_code = 0

    # Get perfs
    raw_perfdatas = allperfs(self)

    perfdatas = []
    outputs = []
    exit_codes = []
    for raw_perfdata_name, metric in raw_perfdatas.items():
        # Init
        data = {}
        # Get data name
        raw_perfdata_name = raw_perfdata_name.replace("current-", "")
        # Get value
        data['value'] = float(metric.value)

        # Get threshold
        data['warn'] = None
        data['crit'] = None

        min_warn = self.host.customs.get('_%s_MIN_WARN' % raw_perfdata_name.upper(), None)
        min_crit = self.host.customs.get('_%s_MIN_CRIT' % raw_perfdata_name.upper(), None)
        max_warn = self.host.customs.get('_%s_MAX_WARN' % raw_perfdata_name.upper(), None)
        max_crit = self.host.customs.get('_%s_MAX_CRIT' % raw_perfdata_name.upper(), None)

        # Get output name
        data['name'] = self.customs.get('_%s_NAME' % raw_perfdata_name.upper(), '')
        if data['name'] == '':
            data['name'] = raw_perfdata_name

        # Get perfdata name
        data['perfname'] = self.customs.get('_%s_PERF_NAME' % raw_perfdata_name.upper(), '')
        if data['perfname'] == '':
            data['perfname'] = raw_perfdata_name

        # Get unit name
        data['unit'] = self.customs.get('_%s_UNIT' % raw_perfdata_name.upper(), '')

        # Transform threshold
        if min_warn and min_crit:
            data['warn'] = float(min_warn)
            data['crit'] = float(min_crit)
            operator_name = 'le'
        elif max_warn and max_crit:
            data['warn'] = float(max_warn)
            data['crit'] = float(max_crit)
            
            operator_name = 'ge'

        # Prepare output
        if not data['warn'] is None:
            perfdatas.append("%(perfname)s=%(value)0.2f%(unit)s;%(warn)0.2f;%(crit)0.2f;0;" % data)
        else:
            perfdatas.append("%(perfname)s=%(value)0.2f%(unit)s;;;0;" % data)


        outputs.append("%(name)s: %(value)0.2f" % data)

        # Get status
        if not data['warn'] is None:
            if getattr(operator, operator_name)(data['value'], data['crit']):
                exit_codes.append(2)
            elif getattr(operator, operator_name)(data['value'], data['warn']):
                exit_codes.append(1)
            else:
                exit_codes.append(0)
        else:
            exit_codes.append(0)

    # Finish output
    if 3 in exit_codes:
        exit_code = 3
    else:
        exit_code = max(exit_codes)

    perfdata = " ".join(perfdatas)
    output = " - ".join((exit_code_output[exit_code], " - ".join(outputs)))

    # Set ouput
    set_value(self, output, perfdata, exit_code)

except Exception, e:
    set_value(self, "UNKNOWN: Trigger error: " + str(e), "", 3)