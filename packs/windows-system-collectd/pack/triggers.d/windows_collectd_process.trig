#!/usr/bin/env python
import operator
try:
    def readable(octets):
        units = ['K', 'M', 'G', 'T', 'P']
        unit = 'B'
        for i, u in enumerate(units):
            if octets >= 1024:
                octets = octets / 1024.0
                unit = units[i]
            else:
                break
        return octets, unit


    exit_code_output = {0: 'OK',
                        1: 'WARNING',
                        2: 'CRITICAL',
                        3: 'UNKNOWN',
                       }
    exit_code = 0
    # Get threshold
    data = {'warn': None,
            'crit': None,
           }

    process_name = self.service_description.replace('processes-', '').upper()
    min_warn = self.host.customs.get('%s_PROCESS_MIN_WARN' % process_name, None)
    min_crit = self.host.customs.get('%s_PROCESS_MIN_CRIT' % process_name, None)
    max_warn = self.host.customs.get('%s_PROCESS_MAX_WARN' % process_name, None)
    max_crit = self.host.customs.get('%s_PROCESS_MAX_CRIT' % process_name, None)

    # Get perfs
    data['memory-commit_charge'] = float(perf(self, 'memory-commit_charge'))
    data['memory-kernel'] = float(perf(self, 'memory-kernel'))
    data['process_count'] = float(perf(self, 'ps_count_0'))
    data['thread_count'] = float(perf(self, 'ps_count_1'))
    data['cputime_user'] = float(perf(self, 'ps_cputime_0'))
    data['cputime_syst'] = float(perf(self, 'ps_cputime_1'))
    data['disk_octets_read'] = float(perf(self, 'ps_disk_octets_0'))
    data['disk_octets_write'] = float(perf(self, 'ps_disk_octets_1'))
    data['disk_ops_read'] = float(perf(self, 'ps_disk_ops_0'))
    data['disk_ops_write'] = float(perf(self, 'ps_disk_ops_1'))
    data['minor_pagefaults'] = float(perf(self, 'ps_pagefaults_0'))
    data['major_pagefaults'] = float(perf(self, 'ps_pagefaults_1'))
    data['working_set_size'] = float(perf(self, 'ps_rss'))
    

    # Transform threshold
    if min_warn and min_crit:
        data['warn'] = int(min_warn)
        data['crit'] = int(min_crit)
        operator_name = 'le'
    elif max_warn and max_crit:
        data['warn'] = int(max_warn)
        data['crit'] = int(max_crit)
        operator_name = 'ge'

    # Prepare output
    if not data['warn'] is None:
        perf_data = ("process_count=%(process_count)d;%(warn)s;%(crit)s;0; "
                     "thread_count=%(thread_count)d;%(warn)s;%(crit)s;0;"  % data)
    else:
        perf_data = ("process_count=%(process_count)d;;;0; "
                     "thread_count=%(thread_count)d;;;0; " % data)

    for d in data:
        if not d in ['process_count', 'thread_count', 'warn', 'crit']:
            perf_data += " %s=%d;;;" % (d, data[d])

    output = "Process count: %(process_count)d - Thread count: %(thread_count)d" % data

    # Get status
    if not data['warn'] is None:
         if getattr(operator, operator_name)(data['process_count'], data['crit']):
             exit_code = 2
         elif getattr(operator, operator_name)(data['process_count'], data['warn']):
             exit_code = 1

    # Finish output
    output = " - ".join((exit_code_output[exit_code], output))

    # Set ouput
    set_value(self, output, perf_data, exit_code)

except Exception, e:
    set_value(self, "UNKNOWN: Trigger error: " + str(e), "", 3)