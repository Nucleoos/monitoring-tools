#!/usr/bin/env python
import operator
try:
    def readable(octets):
        units = ['K', 'M', 'G', 'T', 'P']
        unit = 'B'
        for i, u in enumerate(units):
            if octets >= 1024:
                octets = octets / 1024.0
                unit = units[i]
            else:
                break
        return octets, unit


    exit_code_output = {0: 'OK',
                        1: 'WARNING',
                        2: 'CRITICAL',
                        3: 'UNKNOWN',
                       }
    exit_code = 0
    # Get threshold
    data = {'warn': None,
            'crit': None,
           }

    process_name = self.service_description.replace('processes-', '').upper()
    min_warn = self.host.customs.get('PROCESSES_MIN_WARN', None)
    min_crit = self.host.customs.get('PROCESSES_MIN_CRIT', None)
    max_warn = self.host.customs.get('PROCESSES_MAX_WARN', None)
    max_crit = self.host.customs.get('PROCESSES_MAX_CRIT', None)

    if min_warn and min_crit:
        data['warn'] = int(min_warn)
        data['crit'] = int(min_crit)
        operator_name = 'le'
    elif max_warn and max_crit:
        data['warn'] = int(max_warn)
        data['crit'] = int(max_crit)
        operator_name = 'ge'

    perf_datas = []
    outputs = []
    count_dict = {"process_count": 0, "thread_count": 1}

    for count_name, index in count_dict.items():
        try:
            # Get data
            data['name'] = count_name
            data['count'] = float(perf(self, 'ps_count_%d' % index))
            data['clean'] = "%s%s" % (count_name[0].upper(), count_name[1:-6])
            if not data['warn'] is None:
                perf_datas.append('%(name)s=%(count)d;%(warn)s;%(crit)s;0;' % data)
                if getattr(operator, operator_name)(data['process_count'], data['crit']):
                    exit_code = 2
                elif getattr(operator, operator_name)(data['process_count'], data['warn']):
                    exit_code = max(exit_code, 1)
            else:
                perf_datas.append('%(name)s=%(count)d;;;0' % data)
        except:
            # If we get an error, we just pass this data_name (IN and OUT are ignored)
            bad_data = True

        if bad_data:
        # We get an error, so we pass to the next data
            continue

            # Prepare output
        outputs.append("%(clean)s count: %(count)d" % data)

    # Set ouput
    perf_data = " ".join(perf_datas)
    output = " # ".join(outputs)
    output = " - ".join((exit_code_output[exit_code], output))
    set_value(self, output, perf_data, exit_code)
except Exception, e:
    set_value(self, "UNKNOWN: Trigger error: " + str(e), "", 3)