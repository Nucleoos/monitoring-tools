#!/usr/bin/env python
try:
    import re
    def readable(octets):
        units = ['KB', 'MB', 'GB', 'TB', 'PB']
        unit = 'B'
        for i, u in enumerate(units):
            if octets > 1024:
                octets = octets / 1024.0
                unit = units[i]
            else:
                break
        return octets, unit

    exit_code_output = {0: 'OK',
                        1: 'WARNING',
                        2: 'CRITICAL',
                        3: 'UNKNOWN',
                       }
    exit_code = 0
    outputs = []
    
    # Get threshold
    data = {}

    # Get perfs
    raw_perf_datas = allperfs(self)
    if_names = set([re.match('([^-]*)-(.*)_([^-]*)', metric_name).groups()[1]
                           for metric_name in raw_perf_datas.keys()])
    
    perf_datas = [] 
    exit_codes = []
    outputs =[]
    set_value(self, str(raw_perf_datas), '', exit_code)
    for if_ in if_names:
        data['if'] = if_
        data['octets_in'] = float(raw_perf_datas.get('if_octets-%(if)s_0' % data).value)
        data['octets_out'] = float(raw_perf_datas.get('if_octets-%(if)s_1' % data).value)
        data['packets_in'] = float(raw_perf_datas.get('if_packets-%(if)s_0' % data).value)
        data['packets_out'] = float(raw_perf_datas.get('if_packets-%(if)s_1' % data).value)
        # Prepare output
        perf_datas.append("'%(if)s_octets_in=%(octets_in)0.2fbit/s;;;0' "
                          "'%(if)s_octets_out=%(octets_out)0.2fbit/s;;;0' "
                          "'%(if)s_packets_in=%(packets_in)0.2fpacket/s;;;0' "
                          "'%(if)s_packets_out=%(packets_out)0.2fpacket/s;;;0' " % data)
        data['if'] = data['if'].capitalize()
        data['h_octets_in'], data['h_octets_in_u'] = readable(data['octets_in'])
        data['h_octets_out'], data['h_octets_out_u'] = readable(data['octets_out'])
        outputs.append("%(if)s (in/out):  Traffic %(h_octets_in)0.2f%(h_octets_in_u)s/s/%(h_octets_out)0.2f%(h_octets_out_u)s/s - Packets %(packets_in)0.2f/%(packets_out)0.2f (packet/s)" % data)

    # Set ouput
    perf_data = " ".join(perf_datas)
    output = " # ".join(outputs)
    set_value(self, output, perf_data, exit_code)
        
except Exception, e:
    set_value(self, "UNKNOWN: Trigger error: " + str(e), "", 3)