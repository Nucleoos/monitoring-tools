#!/usr/bin/env python
try:
    def readable(octets):
        units = ['K', 'M', 'G', 'T', 'P']
        unit = 'B'
        for i, u in enumerate(units):
            if octets >= 1024:
                octets = octets / 1024.0
                unit = units[i]
            else:
                break
        return octets, unit


    exit_code_output = {0: 'OK',
                        1: 'WARNING',
                        2: 'CRITICAL',
                        3: 'UNKNOWN',
                       }
    exit_code = 0
    # Get threshold
    data = {}



    data['used_warn_p'] = self.host.customs.get('_MEMORY_USED_WARN', None)
    data['used_crit_p'] = self.host.customs.get('_MEMORY_USED_CRIT', None)
    if data['used_warn_p'] and data['used_crit_p']:
        data['used_warn_p'] = float(data['used_warn_p'])
        data['used_crit_p'] = float(data['used_crit_p'])
        data['available_warn_p'] = 100 - data['used_warn_p']
        data['available_crit_p'] = 100 - data['used_crit_p']
    else:
        data['available_warn_p'] = self.host.customs.get('_MEMORY_FREE_WARN', None)
        data['available_crit_p'] = self.host.customs.get('_MEMORY_FREE_CRIT', None)
        if data['available_warn_p'] and data['available_crit_p']:
            data['available_warn_p'] = float(data['available_warn_p'])
            data['available_crit_p'] = float(data['available_crit_p'])
            data['used_warn_p'] = 100 - data['available_warn_p']
            data['used_crit_p'] = 100 - data['available_crit_p']

    # Get perfs
#    data['unused'] = float(perf(self, 'memory-free'))
    # TODO: What is 'reserved' ???

#memory-pool_paged=42815488.0 memory-working_set=1889755136.0 memory-pool_nonpaged=60534784.0 memory-available=80633856.0 memory-system_code=2609152.0 memory-system_cache=66965504.0 memory-system_driver=3756032.0
    data['working_set'] = float(perf(self, 'memory-working_set'))
    data['pool_nonpaged'] = float(perf(self, 'memory-pool_nonpaged'))
    data['available'] = float(perf(self, 'memory-available'))
    data['system_code'] = float(perf(self, 'memory-system_code'))
    data['system_cache'] = float(perf(self, 'memory-system_cache'))
    data['system_driver'] = float(perf(self, 'memory-system_driver'))


    data['total'] = data['working_set'] + \
                    data['pool_nonpaged'] + \
                    data['available'] + \
                    data['system_code'] + \
                    data['system_cache'] + \
                    data['system_driver']

    
#    data['available'] = data['unused'] + data['buffered'] + data['cached']
    data['used'] = data['total'] - data['available'] 
    data['used_p'] = data['used'] * 100 / data['total']
    data['available_p'] = data['available'] * 100 / data['total']

    # Transform threshold
    if data['used_warn_p']:
        data['used_warn'] = data['used_warn_p'] * data['total'] / 100.0
        data['used_crit'] = data['used_crit_p'] * data['total'] / 100.0
        data['available_warn'] = data['available_warn_p'] * data['total'] / 100.0
        data['available_crit'] = data['available_crit_p'] * data['total'] / 100.0

    # Prepare output
    if data['used_warn_p']:
        perf_data = (
                     "available=%(available)dbytes;%(available_warn)d;%(available_crit)d;0;%(total)d "
                     "working_set=%(working_set)dbytes;;;0;%(total)d "
                     "pool_nonpaged=%(pool_nonpaged)dbytes;;;0;%(total)d "
                     "system_code=%(system_code)dbytes;;;0;%(total)d "
                     "system_cache=%(system_cache)dbytes;;;0;%(total)d "
                     "system_driver=%(system_driver)dbytes;;;0;%(total)d " % data)
    else:
        perf_data = (
                     "available=%(available)dbytes;;;0;%(total)d "
                     "working_set=%(working_set)dbytes;;;0;%(total)d "
                     "pool_nonpaged=%(pool_nonpaged)dbytes;;;0;%(total)d "
                     "system_code=%(system_code)dbytes;;;0;%(total)d "
                     "system_cache=%(system_cache)dbytes;;;0;%(total)d "
                     "system_driver=%(system_driver)dbytes;;;0;%(total)d " % data)

    data['h_available'], data['h_available_u'] = readable(data['available']) 
    data['h_used'], data['h_used_u'] = readable(data['used']) 
    data['h_total'], data['h_total_u'] = readable(data['total']) 
    output = "Memory used: %(h_used)0.2f%(h_used_u)s/%(h_total)0.2f%(h_total_u)s (Available: %(h_available)0.2f%(h_available_u)s)" % data

    # Get status
    if data['used_warn_p']:
        if data['available_p'] < data['available_crit_p']:
            exit_code = 2
        elif data['available_p'] < data['available_warn_p']:
            exit_code = 1

    # Finish output
    output = " - ".join((exit_code_output[exit_code], output))

    # Set ouput
    set_value(self, output, perf_data, exit_code)

except Exception, e:
    set_value(self, "UNKNOWN: Trigger error: " + str(e), "", 3)