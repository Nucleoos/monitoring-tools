#!/usr/bin/env python
import operator
import logging
backend = "Shinken"
logger = logging.getLogger(backend)
try:
    exit_code_output = {0: 'OK',
                        1: 'WARNING',
                        2: 'CRITICAL',
                        3: 'UNKNOWN',
                       }
    exit_code = 0
    # Get threshold
    data = {'warn': None,
            'crit': None,
           }

    process_name = self.service_description.replace('processes-', '').upper()
    min_warn = self.host.customs.get('_PROCESS_%s_MIN_WARN' % process_name, None)
    min_crit = self.host.customs.get('_PROCESS_%s_MIN_CRIT' % process_name, None)
    max_warn = self.host.customs.get('_PROCESS_%s_MAX_WARN' % process_name, None)
    max_crit = self.host.customs.get('_PROCESS_%s_MAX_CRIT' % process_name, None)

    # Get perfs
    metrics = ['ps_data', 'ps_code', 'ps_pagefaults_0', 'ps_pagefaults_1',
               'ps_count_0', 'ps_count_1', 'ps_vm', 'ps_stacksize',
               'ps_disk_ops_0', 'ps_disk_ops_1', 'ps_rss', 'ps_cputime_0',
               'ps_cputime_1', 'ps_disk_octets_0', 'ps_disk_octets_1']
    error = False
    for metric in metrics:
        try:
            data[metric] = float(perf(self, metric))
        except Exception:
            logger.warning("%s perf_data is missing for %s" % (metric, self.get_full_name()))
            logger.info("Dumping perf_data : %s" % self.perf_data)
            if metric.startswith("ps_count_0"):
                perf_data = ""
                output = "Error : A required perf_data is missing to compute trigger"
                exit_code = 3
                error = True

    if not error:
        # Transform threshold
        if min_warn and min_crit:
            data['warn'] = int(min_warn)
            data['crit'] = int(min_crit)
            operator_name = 'le'
        elif max_warn and max_crit:
            data['warn'] = int(max_warn)
            data['crit'] = int(max_crit)
            operator_name = 'ge'

        # Prepare output
        if not data['warn'] is None:
            perf_data = ("ps_count_0=%(ps_count_0)d;%(warn)s;%(crit)s;0; "
                         "ps_count_1=%(ps_count_1)d;%(warn)s;%(crit)s;0; " % data)
        else:
            perf_data = ("ps_count_0=%(ps_count_0)d;;;0; "
                         "ps_count_1=%(ps_count_1)d;;;0; " % data)

        for d in data:
            if not d in ['ps_count_0', 'ps_count_1', 'warn', 'crit']:
                perf_data += " %s=%d;;;" % (d, data[d])

        output = "Processes count: %(ps_count_0)d" % data

        # Get status
        if not data['warn'] is None:
            if getattr(operator, operator_name)(data['ps_count_0'], data['warn']):
                exit_code = 1
            if getattr(operator, operator_name)(data['ps_count_0'], data['crit']):
                exit_code = 2

    # Finish output
    output = " - ".join((exit_code_output[exit_code], output))

    # Set ouput
    set_value(self, output, perf_data, exit_code)

except Exception, e:
    set_value(self, "UNKNOWN: Trigger error: " + str(e), "", 3)
