#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Copyright (C) 2014, vdnguyen <vanduc.nguyen@savoirfairelinux.com>

import urllib, json
from shinkenplugins import BasePlugin, PerfData, STATES

class Plugin(BasePlugin):
    NAME = "check-ferries"
    VERSION = "0.1"
    DESCRIPTION = "check ferries operated by STQ"
    AUTHOR = "vdnguyen"
    EMAIL = "vanduc.nguyen@savoirfairelinux.com"
    
    ARGS = [# Can"t touch this:
            ("h", "help", "display plugin help", False),
            ("v", "version", "display plugin version number", False),
            # Hammer time^W^W Add your plugin arguments here:
            # ("short", "long", "description", "does it expect a value?")
            ('w', 'warning', 'Limit to result in a warning state', True),
            ('c', 'critical', 'Limit to result in a critical state', True),
            ]

    def check_args(self, args):
        """ Check arguments validity and set default values
        """
        # Check if warning argument is there
        if not args.get("warning"):
            self.exit(STATES.UNKNOWN, "Missing warning argument")
        # Check if reset day is missing
        if not args.get("critical"):
            self.exit(STATES.UNKNOWN, "Missing critical argument")
        # handle non digital warning argument
        if args.get("warning"):
            warning = args.get("warning")
            if not warning.isdigit():
                self.exit(STATES.UNKNOWN, "Enter warning argument in integer")
        # handle non digital critical argument
        if args.get("critical"):
            warning = args.get("critical")
            if not warning.isdigit():
                self.exit(STATES.UNKNOWN, "Enter critical argument in integer")

        # Return
        return True, None

    @staticmethod
    def get_code_dict():
        # get code dict of all ferries operated by STQ
        url = "https://donnees.traversiers.com/traverses/?lang=fr"
        response = urllib.urlopen(url)
        data = json.loads(response.read())
        code_dict = {}
        for i in data:
            code_dict[i["code"].encode("utf-8")] = i["nom"]

        return code_dict
    
    def run(self, args):
        # get alert in jason and store them in data
        url = "https://donnees.traversiers.com/evenements/actifs/?lang=fr"
        response = urllib.urlopen(url)
        json_alert = json.loads(response.read())
        number_alert = len(json_alert)
        # get warning and critical
        warning = int(args.get("warning"))
        critical = int(args.get("critical"))

        # handle more than 1 problems
        if number_alert > 1:
            problem = "problems"
        else:
            problem = "problem"

        if number_alert >= critical:
            message = "CRITICAL - %s %s" % (number_alert, problem)
            state = STATES.CRITICAL
        elif number_alert >= warning:
            message = "WARNING - %s %s" % (number_alert, problem)
            state = STATES.WARNING
        else:
            message = "OK - %s %s" % (number_alert, problem)
            state = STATES.OK

        p1 = PerfData("number_alert", number_alert, unit="alerts", min_=0)
        self.exit(state, message, p1)

if __name__ == "__main__":
    Plugin()
